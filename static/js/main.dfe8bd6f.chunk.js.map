{"version":3,"sources":["components/atoms/ScrollToTop/index.jsx","components/atoms/Project/index.jsx","components/atoms/Pinned/index.jsx","components/atoms/charts/Calendar2D/index.jsx","components/atoms/charts/Calendar3D/index.jsx","components/atoms/charts/ContribRadar/index.jsx","components/atoms/charts/LatestActivity/index.jsx","components/atoms/SearchBar/index.jsx","components/atoms/OAuth/GitHub/utils.jsx","components/atoms/OAuth/GitHub/PopupWindow.jsx","components/atoms/OAuth/GitHub/OAuth2Login.jsx","Routes.js","actions/core.js","App.js","registerServiceWorker.js","index.js"],"names":["ScrollToTop","React","Component","componentDidUpdate","prevProps","this","props","location","window","scrollTo","render","children","withRouter","Pinned","LatestActivity","SearchBar","state","filter","usernames","componentWillReceiveProps","nextProps","globalState","loading","getUsernameList","handleSelection","event","value","history","push","search","target","key","preventDefault","stopPropagation","setState","globalFunctions","users","then","id","onKeyUp","e","getValue","outline","selected","searchLabel","length","fuzzysort","map","element","i","icon","GuidGenerator","d","Date","getTime","replace","c","r","Math","random","floor","toString","PopupWindow","constructor","url","open","close","cancel","poll","promise","Promise","resolve","reject","iid","setInterval","popup","closed","Error","href","pathname","params","split","reduce","values","param","error","clearInterval","args","catch","OAuth2Login","super","onBtnClick","bind","onRequest","onSuccess","onFailure","authorizationUrl","clientId","clientSecret","delimiter","keys","Object","str","index","query","toQuery","client_id","scope","redirect_uri","redirectUri","response_type","data","code","AuthorizeUrl","fetch","headers","method","res","a","json","accessToken","access_token","username","login","console","log","className","attrs","onClick","color","fab","size","defaultProps","Routes","exact","path","Intel","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dfe8bd6f.chunk.js","sourcesContent":["//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// DOM bindings for React Router\nimport { withRouter } from \"react-router-dom\";\n//#endregion\n\n//#region > Components\n/**\n * @class ScrollToTop Component\n * @description When reloading or switching a page, ReactJS now starts at the\n *              top of the page, and no longer on the last position.\n */\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    const { location } = this.props;\n\n    if (location !== prevProps.location) {\n      // Scroll to top of viewport\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default withRouter(ScrollToTop);\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// React PropTypes\nimport PropTypes from \"prop-types\";\n//> MDB\n// \"Material Design for Bootstrap\" is a great UI design framework\nimport { MDBCol, MDBIcon } from \"mdbreact\";\n//#endregion\n\n//#region > Components\n/** @class A component which contains all projects where the given user is involved */\nclass Project extends React.Component {\n  render() {\n    const { repo } = this.props;\n\n    return (\n      <MDBCol md=\"6\">\n        <a href={repo.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          <li>\n            <div>\n              <p className=\"lead mb-1 float-left\">\n                {repo.name.length > 25\n                  ? repo.name.substring(0, 25) + \"...\"\n                  : repo.name}\n              </p>\n              {repo.languages.length > 0 && (\n                <small className=\"mb-1 float-right text-muted\">\n                  <MDBIcon\n                    icon=\"square\"\n                    className=\"pr-1\"\n                    style={{ color: repo.languages[0].color }}\n                  />\n                  {repo.languages[0].name}\n                </small>\n              )}\n            </div>\n            <div className=\"clearfix\" />\n            <div>\n              <img src={repo.avatarUrl} alt={repo.name} />\n              <small>Owned by {repo.owner.username}</small>\n            </div>\n            <div className=\"py-2\">\n              <img className=\"img-badge\" />\n            </div>\n          </li>\n        </a>\n      </MDBCol>\n    );\n  }\n}\n//#endregion\n\n//#region > PropTypes\nProject.propTypes = {\n  repo: PropTypes.object.isRequired,\n};\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default Project;\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// React PropTypes\nimport PropTypes from \"prop-types\";\n//> MDB\n// \"Material Design for Bootstrap\" is a great UI design framework\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody, MDBIcon } from \"mdbreact\";\n\n//> CSS\nimport \"./pinned.scss\";\n//#endregion\n\n//#region > Components\n/**\n * @class A component which contains a single pinned item for the Overview tab\n */\nclass Pinned extends React.Component {\n  render() {\n    const { category, link, pinned } = this.props;\n\n    return (\n      <MDBCol md=\"4\" className=\"pinned-item\">\n        <MDBCard>\n          <div className={`text-center pinned-header ${category?.color}`} />\n          <MDBCardBody>\n            <div className=\"text-center mt-2\">\n              <p className=\"text-muted\">{pinned?.description}</p>\n            </div>\n            <div>\n              <MDBRow className=\"mx-1\">\n                <MDBCol col=\"6\" className=\"text-left\">\n                  <span className=\"text-muted\">\n                    <MDBIcon icon=\"eye\" className=\"mr-1\" /> {pinned?.views}\n                  </span>\n                </MDBCol>\n                {link && (\n                  <MDBCol col=\"6\" className=\"text-right\">\n                    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <span className=\"clickable text-muted blue-text\">\n                        More\n                      </span>\n                    </a>\n                  </MDBCol>\n                )}\n              </MDBRow>\n            </div>\n          </MDBCardBody>\n        </MDBCard>\n      </MDBCol>\n    );\n  }\n}\n//#endregion\n\n//#region > PropTypes\nPinned.propTypes = {\n  category: PropTypes.object.isRequired,\n  link: PropTypes.string,\n  pinned: PropTypes.object.isRequired,\n};\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default Pinned;\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n//> Additional\n// Used to display popovers on contrib chart items\nimport tippy from \"tippy.js\";\nimport \"tippy.js/dist/tippy.css\";\n// Used to display the time in a readable format\nimport moment from \"moment\";\n//> MDB\n// \"Material Design for Bootstrap\" is a great UI design framework\nimport { MDBRow, MDBCol } from \"mdbreact\";\n\n//> CSS\nimport \"./calendar2d.scss\";\n//#endregion\n\n//#region > Constant Variables\nconst MONTHS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n//#endregion\n\n//#region > Components\n/** @class A two dimensional calendar which displays each days contributions */\nclass Calender2D extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Create reference to HTML canvas\n    this.myInput = React.createRef();\n    this.state = {\n      width: 0,\n      hue: 0,\n      items: 54,\n    };\n  }\n\n  componentDidMount = () => {\n    // Fill calendar\n    this.setCalendar(this.props);\n    // Add resize listener\n    window.addEventListener(\"resize\", this.updateDimensions);\n  };\n\n  componentWillUnmount() {\n    // Remove listener to prevent memory leak\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    for (const index in nextProps) {\n      if (nextProps[index] !== this.props[index]) {\n        this.setCalendar(nextProps);\n      }\n    }\n  }\n\n  updateDimensions = () => {\n    this.setState({\n      width: this.myInput.current.offsetWidth,\n    });\n  };\n\n  setCalendar = async (props) => {\n    if (props.platformData) {\n      // Get contribution data\n      let contribData;\n\n      if (props.year) {\n        contribData = props.platformData.statistic.years.find(\n          (element) => element.year === props.year\n        );\n      } else {\n        contribData = props.platformData.statistic.current;\n      }\n\n      let contributions = contribData.calendar;\n\n      this.setState({\n        width: this.myInput.current.offsetWidth,\n        contributionsList: contributions,\n      });\n    }\n  };\n\n  countContribs = () => {\n    if (this.state.contributionsList) {\n      return this.state.contributionsList.total;\n    } else {\n      return null;\n    }\n  };\n\n  getEachMonth = (pos) => {\n    // Create new empty array\n    let month = new Array();\n    // Get current month\n    let current;\n\n    if (this.props.year) {\n      current = 0;\n    } else {\n      current = new Date().getMonth();\n    }\n\n    // Have each month two times\n    month[0] = \"Jan\";\n    month[1] = \"Feb\";\n    month[2] = \"Mar\";\n    month[3] = \"Apr\";\n    month[4] = \"May\";\n    month[5] = \"Jun\";\n    month[6] = \"Jul\";\n    month[7] = \"Aug\";\n    month[8] = \"Sep\";\n    month[9] = \"Oct\";\n    month[10] = \"Nov\";\n    month[11] = \"Dec\";\n    month[12] = \"Jan\";\n    month[13] = \"Feb\";\n    month[14] = \"Mar\";\n    month[15] = \"Apr\";\n    month[16] = \"May\";\n    month[17] = \"Jun\";\n    month[18] = \"Jul\";\n    month[19] = \"Aug\";\n    month[20] = \"Sep\";\n    month[21] = \"Oct\";\n    month[22] = \"Nov\";\n    month[23] = \"Dec\";\n\n    return month[current + pos];\n  };\n\n  displayDailyInfo = (day, wkey, dkey) => {\n    let cname = \"item-\" + wkey + \"-\" + dkey;\n\n    if (day.total > 0 && day.total !== 1) {\n      tippy(`.${cname}`, {\n        content: `${day.total} contributions on ${moment(day.date).format(\n          \"MMM DD, YYYY\"\n        )}`,\n      });\n    } else if (day.total === 1) {\n      tippy(`.${cname}`, {\n        content: `${day.total} contribution on ${moment(day.date).format(\n          \"MMM DD, YYYY\"\n        )}`,\n      });\n    } else {\n      tippy(`.${cname}`, {\n        content: `No contributions on ${moment(day.date).format(\n          \"MMM DD, YYYY\"\n        )}`,\n      });\n    }\n  };\n\n  render() {\n    if (this.props.platformData) {\n      return (\n        <div id=\"calendar2d\">\n          <div className=\"text-right\">\n            <h3 className=\"font-weight-bold d-inline-block\">\n              {this.countContribs()}\n            </h3>\n            <span> contributions in the last year</span>\n          </div>\n          <MDBRow className=\"text-center\">\n            {MONTHS.map((month, key) => {\n              return (\n                <MDBCol size=\"months\" key={key}>\n                  <small>{this.getEachMonth(key)}</small>\n                </MDBCol>\n              );\n            })}\n          </MDBRow>\n          <div ref={this.myInput}>\n            <svg\n              className=\"calendar\"\n              height={(this.state.width / this.state.items) * 7}\n            >\n              {this.state.contributionsList &&\n                this.state.contributionsList.weeks.map((week, wkey) => {\n                  return week.days.map((day, dkey) => {\n                    if (wkey === 0) {\n                      return (\n                        <rect\n                          key={wkey + \"-\" + dkey}\n                          y={\n                            (this.state.width / this.state.items) * 7 +\n                            (this.state.width / this.state.items) * dkey -\n                            week.days.length *\n                              (this.state.width / this.state.items)\n                          }\n                          x={0}\n                          width={this.state.width / this.state.items}\n                          height={this.state.width / this.state.items}\n                          className={\"item-\" + wkey + \"-\" + dkey}\n                          onMouseOver={() =>\n                            this.displayDailyInfo(day, wkey, dkey)\n                          }\n                          onClick={() => this.props.selectDay(day, wkey, dkey)}\n                          fill={day.color}\n                        ></rect>\n                      );\n                    } else {\n                      return (\n                        <rect\n                          key={wkey + \"-\" + dkey}\n                          y={(this.state.width / this.state.items) * dkey}\n                          x={(this.state.width / this.state.items) * wkey}\n                          width={this.state.width / this.state.items}\n                          height={this.state.width / this.state.items}\n                          className={\"item-\" + wkey + \"-\" + dkey}\n                          onMouseOver={() =>\n                            this.displayDailyInfo(day, wkey, dkey)\n                          }\n                          onClick={() => this.props.selectDay(day, wkey, dkey)}\n                          fill={day.color}\n                        ></rect>\n                      );\n                    }\n                  });\n                })}\n            </svg>\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default Calender2D;\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n//> Additional packages\n// Used to display the time in a readable format\nimport moment from \"moment\";\n//> Obelisk\n// A JavaScript library for building isometric pixel objects\nimport obelisk from \"obelisk.js\";\n\n//> CSS\nimport \"./calendar3d.scss\";\n//#endregion\n\n//#region > Components\n/**\n * @class A three dimensional calendar which displays each days contributions,\n *        and contribution related statistics e.g. busiest days and streaks.\n */\nclass Calendar3D extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Create reference to HTML canvas\n    this.myInput = React.createRef();\n    this.state = {\n      width: 0,\n      hue: 0,\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.props.platformData) {\n      // Add resize listener\n      window.addEventListener(\"resize\", this.updateDimensions);\n\n      this.setState(\n        {\n          width: this.myInput.current.offsetWidth,\n          loading: true,\n        },\n        () => this.checkCache()\n      );\n    }\n  };\n\n  componentDidUpdate = () => {\n    this.checkCache();\n  };\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n  updateDimensions = () => {\n    this.setState(\n      {\n        width: this.myInput.current.offsetWidth,\n      },\n      () => this.checkCache()\n    );\n  };\n\n  renderTopStats() {\n    let countTotal, averageCount, datesTotal, maxCount, dateBest, contribData;\n\n    if (this.props.year) {\n      contribData = this.props.platformData.statistic.years.find(\n        (element) => element.year === this.props.year\n      );\n    } else {\n      contribData = this.props.platformData.statistic.current;\n    }\n\n    let contributionCalendar = contribData.calendar;\n\n    countTotal = contribData.contributions.total;\n    averageCount =\n      Math.round(\n        (contribData.contributions.total / 365 + Number.EPSILON) * 100\n      ) / 100;\n\n    datesTotal =\n      moment(contributionCalendar.startDate).format(\"MMM DD, YYYY\") +\n      \" - \" +\n      moment(contributionCalendar.endDate).format(\"MMM DD, YYYY\");\n\n    /* Busiest day */\n    maxCount = contribData.busiestDay.total;\n    dateBest = moment(contribData.busiestDay.date);\n    dateBest = dateBest.isValid() ? dateBest.format(\"MMM DD\") : \"-\";\n\n    return {\n      __html: `<div class=\"ic-stats-block ic-stats-top\">\\n\n    <span class=\"ic-stats-table\">\\n\n    <span class=\"ic-stats-row\">\\n\n    <span class=\"ic-stats-label\">1 year total\\n\n    <span class=\"ic-stats-count\">${countTotal}</span>\\n\n    <span class=\"ic-stats-average\">${averageCount}</span> per day\\n\n    </span>\\n\n    <span class=\"ic-stats-meta ic-stats-total-meta\">\\n\n    <span class=\"ic-stats-unit\">contributions</span>\\n\n    <span class=\"ic-stats-date\">${datesTotal}</span>\\n\n    </span>\\n\n    </span>\\n\n    <span class=\"ic-stats-row\">\\n\n    <span class=\"ic-stats-label\">Busiest day\\n\n    <span class=\"ic-stats-count\">${maxCount}</span>\\n\n    </span>\\n\n    <span class=\"ic-stats-meta\">\\n\n    <span class=\"ic-stats-unit\">contributions</span>\\n\n    <span class=\"ic-stats-date\">${dateBest}</span>\\n\n    </span>\\n\n    </span>\\n\n    </span>\\n\n    </span>\\n\n    </div>`,\n    };\n  }\n\n  renderBottomStats() {\n    let streakLongest, datesLongest, streakCurrent, datesCurrent, contribData;\n\n    if (this.props.year) {\n      contribData = this.props.platformData.statistic.years.find(\n        (element) => element.year === this.props.year\n      );\n    } else {\n      contribData = this.props.platformData.statistic.current;\n    }\n\n    let contributionCalendar = contribData.calendar;\n\n    if (contribData.streak.longest) {\n      streakLongest = contribData.streak.longest.totalDays;\n      datesLongest =\n        moment(contribData.streak.longest.startDate).format(\"MMM DD, YYYY\") +\n        \" - \" +\n        moment(contribData.streak.longest.endDate).format(\"MMM DD, YYYY\");\n    } else {\n      streakLongest = \"0\";\n      datesLongest = \"-\";\n    }\n    if (contribData.streak.current.id !== -1) {\n      streakCurrent = contribData.streak.current.totalDays;\n      datesCurrent =\n        moment(contribData.streak.current.startDate).format(\"MMM DD, YYYY\") +\n        \" - \" +\n        moment(contribData.streak.current.endDate).format(\"MMM DD, YYYY\");\n    } else {\n      streakCurrent = \"0\";\n      datesCurrent = \"-\";\n    }\n\n    return {\n      __html: `<div class=\"ic-stats-block ic-stats-bottom\">\\n\n    <span class=\"ic-stats-table\">\\n\n    <span class=\"ic-stats-row\">\\n\n    <span class=\"ic-stats-label\">Longest streak\\n\n    <span class=\"ic-stats-count\">${streakLongest}</span>\\n\n    </span>\\n\n    <span class=\"ic-stats-meta\">\\n\n    <span class=\"ic-stats-unit\">days</span>\\n\n    <span class=\"ic-stats-date\">${datesLongest}</span>\\n\n    </span>\\n\n    </span>\\n\n    <span class=\"ic-stats-row\">\\n\n    <span class=\"ic-stats-label\">Current streak\\n\n    <span class=\"ic-stats-count\">${streakCurrent}</span>\\n\n    </span>\\n\n    <span class=\"ic-stats-meta\">\\n\n    <span class=\"ic-stats-unit\">days</span>\\n\n    <span class=\"ic-stats-date\">${datesCurrent}</span>\\n\n    </span>\\n\n    </span>\\n\n    </span>\\n\n    </div>`,\n    };\n  }\n\n  renderIsometrics = () => {\n    if (this.context) {\n      // Create a canvas 2D point for pixel view world\n      let point = new obelisk.Point(70, 70);\n      // Create view instance to nest everything\n      // Canvas could be either DOM or jQuery element\n      let pixelView = new obelisk.PixelView(this.context, point);\n\n      pixelView.clear();\n\n      // Get contributions of the selected year\n      let contribData;\n\n      if (this.props.year) {\n        contribData = this.props.platformData.statistic.years.find(\n          (element) => element.year === this.props.year\n        );\n      } else {\n        contribData = this.props.platformData.statistic.current;\n      }\n\n      let contributions = contribData.calendar;\n\n      // Define basic variables\n      let size = 2 * Math.round(this.state.width / 80 / 2);\n\n      if (size <= 8) {\n        size = 8;\n      }\n\n      const maxHight = 100;\n\n      let x = 0;\n      let y = 0;\n      let maxCount = 0; // Max number of contributions / day in the last year\n      let values = [];\n\n      contributions.weeks.map((week, wkey) => {\n        values[wkey] = [];\n\n        week.days.map((day, dkey) => {\n          // Get max number of contributions\n          if (day.total > maxCount) {\n            maxCount = day.total;\n          }\n          values[wkey][dkey] = day;\n        });\n      });\n\n      values.map((week, wi) => {\n        week.map((day, di) => {\n          // Normalize the values to achieve even distribution\n          let cubeHeight = 3;\n\n          if (maxCount > 0) {\n            cubeHeight += parseInt((maxHight / maxCount) * day.total);\n          }\n\n          // Offsets\n          let x = wi;\n          let y = di;\n\n          // Create cube dimension and color instance\n          let fill = day.color;\n          let color = new obelisk.CubeColor().getByHorizontalColor(\n            parseInt(\"0x\" + fill.replace(\"#\", \"\"))\n          );\n\n          // ANIMATION TOGGLE for @kleberbaum to play with\n          const animated = false;\n\n          if (animated) {\n            var animHeight = 3;\n\n            function draw() {\n              let dimension = new obelisk.CubeDimension(size, size, animHeight);\n              let p3d = new obelisk.Point3D(size * x, size * y, 0);\n              let cube = new obelisk.Cube(dimension, color, false);\n\n              // Render cube primitive into view\n              pixelView.renderObject(cube, p3d);\n              if (animHeight < cubeHeight) {\n                if (parseInt((maxHight / maxCount) * day.total) > 0) {\n                  animHeight += 1;\n                } else {\n                  animHeight = 1;\n                }\n              }\n              // Animations\n              requestAnimationFrame(draw);\n            }\n            draw();\n          } else {\n            let dimension = new obelisk.CubeDimension(size, size, cubeHeight);\n            let p3d = new obelisk.Point3D(size * x, size * y, 0);\n            let cube = new obelisk.Cube(dimension, color, false);\n\n            // Render cube primitive into view\n            pixelView.renderObject(cube, p3d);\n\n            this.cacheChart();\n          }\n        });\n      });\n\n      if (this.state.loading) {\n        this.setState({\n          loading: false,\n        });\n      }\n    }\n  };\n\n  cacheChart = async () => {\n    if (!localStorage.getItem(\"3dChart\")) {\n      window.setTimeout(() => {\n        if (this.context) {\n          localStorage.setItem(\n            \"3dChart\",\n            JSON.stringify({\n              data: this.context.toDataURL(),\n              timestamp: new Date().getTime(),\n            })\n          );\n        }\n      }, 0);\n    }\n  };\n\n  checkCache = () => {\n    const cache = localStorage.getItem(\"3dChart\");\n\n    if (cache) {\n      const cacheObject = JSON.parse(cache);\n\n      if (cacheObject.timestamp > new Date().getTime() - 3600000) {\n        window.setTimeout(() => this.renderIsometrics(), 0);\n      } else {\n        window.setTimeout(() => this.renderIsometrics(), 0);\n      }\n    } else {\n      window.setTimeout(() => this.renderIsometrics(), 0);\n    }\n  };\n\n  renderCache = () => {\n    const data = localStorage.getItem(\"3dChart\");\n    const dataObject = JSON.parse(data);\n    const context = this.context.getContext(\"2d\");\n\n    let img = new Image();\n\n    img.src = dataObject.data;\n\n    if (context !== null) {\n      img.onload = () => {\n        context.drawImage(img, 0, 0);\n      };\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"calendar3d\">\n        {this.props.platformData && this.state.width > 500 && (\n          <>\n            <div dangerouslySetInnerHTML={this.renderTopStats()} />\n            <div dangerouslySetInnerHTML={this.renderBottomStats()} />\n          </>\n        )}\n        <div ref={this.myInput}>\n          <canvas\n            ref={(c) => (this.context = c)}\n            width={this.state.width}\n            height=\"350\"\n          ></canvas>\n        </div>\n        {this.state.cache && <img src={this.state.cache} alt=\"\" />}\n      </div>\n    );\n  }\n}\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default Calendar3D;\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n//> Additional\n// Charts for displaying user contribution distribution (Chart.js 2)\nimport { Radar } from \"react-chartjs-2\";\n//#endregion\n\n//#region > Components\n/**\n * @class contribution statistic component which displays the the ratio of\n *        commits, issues, pull requests and code reviews.\n */\nclass ContribRadar extends React.Component {\n  state = {\n    dataRadarOptions: {\n      responsive: true,\n      elements: {\n        line: {\n          tension: 0,\n        },\n      },\n      tooltips: {\n        enabled: false,\n      },\n      legend: {\n        display: false,\n      },\n      elements: {\n        point: {\n          radius: 0,\n        },\n      },\n      scale: {\n        pointLabels: {\n          fontSize: 11,\n          color: \"grey\",\n        },\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          display: false,\n        },\n      },\n      scales: {\n        yAxes: [\n          {\n            gridLines: {\n              display: false,\n              drawBorder: false,\n            },\n            ticks: {\n              display: false,\n            },\n          },\n        ],\n        xAxes: [\n          {\n            gridLines: {\n              display: false,\n              drawBorder: false,\n            },\n            ticks: {\n              beginAtZero: true,\n              display: false,\n            },\n          },\n        ],\n      },\n    },\n  };\n\n  componentDidMount = () => {\n    // Start of by rendering chart with current year\n    this.calculateSources(null);\n  };\n\n  componentWillReceiveProps(nextProps) {\n    // Update chart\n    this.calculateSources(nextProps.year);\n  }\n\n  fillChart = (results) => {\n    //#TSID4\n    //console.log(\"FILL CONTRIB RADAR CHART\", results);\n\n    if (results) {\n      this.setState({\n        dataRadar: {\n          labels: [\n            `Code Review ${results[0].data[0]}%`,\n            `Issues ${results[0].data[1]}%`,\n            `Pull Request ${results[0].data[2]}%`,\n            `Commits ${results[0].data[3]}%   `,\n          ],\n          datasets: results,\n        },\n      });\n    } else {\n      this.setState({ dataRadar: null });\n    }\n  };\n\n  calculateSources = (nextPropsYear) => {\n    const { statistic } = this.props;\n\n    let totalReviews = 0;\n    let totalIssues = 0;\n    let totalRequests = 0;\n    let totalCommits = 0;\n    let totalSources = 1;\n    let year;\n    let results = [];\n\n    if (nextPropsYear === null) {\n      year = this.props.year;\n    } else {\n      year = nextPropsYear;\n    }\n\n    if (year) {\n      let selectedYear = statistic.years.find(\n        (element) => element.year === year\n      );\n\n      totalIssues = selectedYear.contributions.issue.share;\n      totalRequests = selectedYear.contributions.pullRequest.share;\n      totalCommits = selectedYear.contributions.commit.share;\n      totalReviews = selectedYear.contributions.pullRequestReview.share;\n    } else {\n      let contributions = statistic.current.contributions;\n\n      totalIssues = contributions.issue.share;\n      totalRequests = contributions.pullRequest.share;\n      totalCommits = contributions.commit.share;\n      totalReviews = contributions.pullRequestReview.share;\n    }\n\n    let values = [totalReviews, totalIssues, totalRequests, totalCommits];\n\n    // Check if the values are valid\n    if (values.includes(undefined)) {\n      this.fillChart(null);\n    } else {\n      results.push({\n        label: \"GitHub\",\n        backgroundColor: \"rgba(123, 201, 111,.4)\",\n        borderColor: \"rgba(123, 201, 111)\",\n        data: values,\n      });\n\n      // Calculate averages\n      let avgReviews, avgIssues, avgRequests, avgCommits;\n\n      avgReviews = parseInt(totalReviews) / parseInt(totalSources);\n      avgIssues = parseInt(totalIssues) / parseInt(totalSources);\n      avgRequests = parseInt(totalRequests) / parseInt(totalSources);\n      avgCommits = parseInt(totalCommits) / parseInt(totalSources);\n\n      this.fillChart(results);\n    }\n  };\n\n  render() {\n    if (this.state.dataRadar) {\n      return (\n        <Radar\n          data={this.state.dataRadar}\n          options={this.state.dataRadarOptions}\n          height={150}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n}\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default ContribRadar;\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n//> Additional\n// Charts for displaying user contribution distribution (Chart.js 2)\nimport { Line } from \"react-chartjs-2\";\n// Used to display the time in a readable format\nimport moment from \"moment\";\n//#endregion\n\n//#region > Components\n/**\n * @class A week calendar which compares the contributions of a selectable week\n *        with the current week.\n */\nclass LatestActivity extends React.Component {\n  state = {\n    dataLineOptions: {\n      responsive: true,\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              display: false,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            ticks: {\n              display: false,\n            },\n            gridLines: {\n              color: \"#ededed\",\n            },\n          },\n        ],\n      },\n    },\n  };\n\n  componentDidMount = () => {\n    // Start of by rendering chart with current week\n    this.calculateSources(undefined, undefined);\n  };\n\n  componentWillReceiveProps(nextProps) {\n    // Update chart\n    this.calculateSources(nextProps.year, nextProps.activity);\n  }\n\n  fillChart = (results, lastWeek) => {\n    //#TSID5\n    //console.log(\"FILL LATEST ACTIVITY CHART\", results, lastWeek);\n\n    if (results) {\n      this.setState({\n        dataLine: {\n          labels: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n          datasets: [\n            {\n              label: \"This week\",\n              fill: true,\n              lineTension: 0.3,\n              backgroundColor: \"rgba(255,255,255, 0)\",\n              borderColor: \"rgb(123, 201, 111)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBackgroundColor: \"rgb(255, 255, 255)\",\n              pointRadius: 4,\n              pointHitRadius: 10,\n              data: results,\n            },\n            {\n              label: \"Last week\",\n              fill: true,\n              lineTension: 0.3,\n              backgroundColor: \"rgba(255,255,255, 0)\",\n              borderColor: \"rgba(123, 201, 111, .2)\",\n              borderCapStyle: \"butt\",\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: \"miter\",\n              pointBackgroundColor: \"rgb(255, 255, 255)\",\n              pointRadius: 4,\n              pointHitRadius: 10,\n              data: lastWeek,\n            },\n          ],\n        },\n      });\n    } else {\n      this.setState({ dataLine: null });\n    }\n  };\n\n  calculateSources = (year, activity) => {\n    const { statistic } = this.props;\n\n    let contribData, week, lastWeek, lastWeekValues;\n\n    if (!year) {\n      contribData = statistic.current;\n    } else {\n      contribData = statistic.years.find((element) => element.year === year);\n    }\n\n    const weeks = contribData.calendar.weeks;\n\n    if (!activity) {\n      week = weeks[weeks.length - 1];\n      lastWeek = weeks[weeks.length - 2];\n    } else {\n      week = weeks[activity.wkey];\n      lastWeek = weeks[activity.wkey - 1];\n    }\n\n    const values = week.days.map((day, i) => {\n      return day.total;\n    });\n\n    if (lastWeek) {\n      lastWeekValues = lastWeek.days.map((day, i) => {\n        return day.total;\n      });\n    }\n\n    this.setState(\n      {\n        startDate: week.days[0]?.date,\n        endDate: week.days[6]?.date,\n      },\n      () => this.fillChart(values, lastWeekValues)\n    );\n  };\n\n  render() {\n    if (this.state.dataLine) {\n      return (\n        <>\n          <p className=\"text-muted\">\n            <small>\n              {moment(this.state.startDate).format(\"DD.MM.YYYY\")}\n              {\" - \"}\n              {moment(this.state.endDate).format(\"DD.MM.YYYY\")}\n            </small>\n          </p>\n          <Line\n            data={this.state.dataLine}\n            options={this.state.dataLineOptions}\n            height={150}\n          />\n        </>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default LatestActivity;\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// DOM bindings for React Router\nimport { withRouter } from \"react-router-dom\";\n// React PropTypes\nimport PropTypes from \"prop-types\";\n//> MDB\n// \"Material Design for Bootstrap\" is a great UI design framework\nimport {\n  MDBSelect,\n  MDBSelectInput,\n  MDBSelectOption,\n  MDBSelectOptions,\n} from \"mdbreact\";\n//> Fuzzysort\n// Fast SublimeText-like fuzzy search for JavaScript\nimport * as fuzzysort from \"fuzzysort\";\n//> CSS\nimport \"./search.scss\";\n//#endregion\n\n//#region > Components\n/**\n * @class A component which contains a search bar\n */\nclass SearchBar extends React.Component {\n  state = {\n    filter: \"\",\n    usernames: [],\n  };\n\n  componentWillReceiveProps = (nextProps) => {\n    if (!nextProps.globalState.loading) {\n      this.getUsernameList();\n    }\n  };\n\n  handleSelection = (event, value) => {\n    if (event === \"user\") {\n      this.props.history.push(\"/u/\" + value);\n    } else if (event === \"search_page\") {\n      this.props.history.push(\"/search?q=\" + value);\n    }\n  };\n\n  search = (event) => {\n    const value = event.target.value;\n\n    // 'keypress' event misbehaves on mobile so we track 'Enter' key via 'keydown' event\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      event.stopPropagation();\n      this.handleSelection(\"search_page\", value);\n    } else {\n      this.setState({\n        filter: value,\n      });\n    }\n  };\n\n  getUsernameList = () => {\n    const { globalFunctions } = this.props;\n\n    globalFunctions.users().then((usernames) => {\n      this.setState({\n        usernames,\n      });\n    });\n  };\n\n  render() {\n    const { globalState } = this.props;\n\n    //Select component does not support onChange event. Instead, you can use getValue or getTextContent methods.\n    return (\n      <MDBSelect\n        id=\"search\"\n        onKeyUp={(e) => this.search(e)}\n        getValue={(value) => this.handleSelection(\"user\", value)}\n        outline\n      >\n        <MDBSelectInput selected=\"Find a user\" />\n        <MDBSelectOptions search searchLabel=\"\">\n          {this.state.usernames ? (\n            this.state.usernames.length > 0 && this.state.filter.length > 0 ? (\n              fuzzysort\n                .go(this.state.filter, this.state.usernames)\n                .map((element, i) => {\n                  return (\n                    <MDBSelectOption\n                      key={i}\n                      icon={\"https://octodex.github.com/images/nyantocat.gif\"}\n                    >\n                      {element.target}\n                    </MDBSelectOption>\n                  );\n                })\n            ) : null\n          ) : (\n            <span>Loading</span>\n          )}\n        </MDBSelectOptions>\n      </MDBSelect>\n    );\n  }\n}\n//#endregion\n\n//#region > PropTypes\nSearchBar.propTypes = {};\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default withRouter(SearchBar);\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Functions\n/**\n * @returns {values} Params selected from a query\n * @description This function gets params out of a query\n */\nfunction toParams(query) {\n  const q = query.replace(/^\\?/, \"\");\n\n  return q.split(\"&\").reduce((values, param) => {\n    const [key, value] = param.split(\"=\");\n\n    values[key] = value;\n\n    return values;\n  }, {});\n}\n\n/**\n * @returns {query} A query for requests\n * @description This function builds a query out of params\n */\nfunction toQuery(params, delimiter = \"&\") {\n  const keys = Object.keys(params);\n\n  return keys.reduce((str, key, index) => {\n    let query = `${str}${key}=${params[key]}`;\n\n    if (index < keys.length - 1) {\n      query += delimiter;\n    }\n\n    return query;\n  }, \"\");\n}\n\n/**\n * @returns {string} A guid string\n * @description This function generates a random guid string\n */\nfunction GuidGenerator() {\n  let d = new Date().getTime();\n\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    let r = (d + Math.random() * 16) % 16 | 0;\n\n    d = Math.floor(d / 16);\n\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n//#endregion\n\n//#region > Exports\nexport { toParams, toQuery, GuidGenerator };\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\nimport { toParams } from \"./utils\";\n//#endregion\n\n//#region > Components\n/**\n * @class A windows that displays the GitHub login page for OAuth\n */\nclass PopupWindow {\n  constructor(url = {}) {\n    this.url = url;\n  }\n\n  open() {\n    const { url } = this;\n\n    this.window = window.open(url, \"_blank\");\n  }\n\n  close() {\n    this.cancel();\n    this.window.close();\n  }\n\n  poll() {\n    this.promise = new Promise((resolve, reject) => {\n      this.iid = window.setInterval(() => {\n        try {\n          const popup = this.window;\n\n          if (!popup || popup.closed !== false) {\n            this.close();\n\n            reject(new Error(\"The popup was closed\"));\n\n            return;\n          }\n\n          if (\n            popup.location.href === this.url ||\n            popup.location.pathname === \"blank\"\n          ) {\n            return;\n          }\n\n          const params = toParams(popup.location.search);\n          resolve(params);\n\n          this.close();\n        } catch (error) {\n          /*\n           * Ignore DOMException: Blocked a frame with origin from accessing a\n           * cross-origin frame.\n           */\n        }\n      }, 500);\n    });\n  }\n\n  cancel() {\n    if (this.iid) {\n      window.clearInterval(this.iid);\n      this.iid = null;\n    }\n  }\n\n  then(...args) {\n    return this.promise.then(...args);\n  }\n\n  catch(...args) {\n    return this.promise.then(...args);\n  }\n\n  static open(...args) {\n    const popup = new this(...args);\n\n    popup.open();\n    popup.poll();\n\n    return popup;\n  }\n}\n//#endregion\n\n//#region > Exports\n//> Default Components\nexport default PopupWindow;\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n//> MDB\n// \"Material Design for Bootstrap\" is a great UI design framework\nimport { MDBBtn, MDBIcon } from \"mdbreact\";\n\n//> PopupWindow\nimport PopupWindow from \"./PopupWindow\";\n//> Utils\nimport { toQuery, GuidGenerator } from \"./utils\";\n//#endregion\n\n//#region > Components\n/**\n * @class A button that is used for GitHub OAuth\n */\nclass OAuth2Login extends Component {\n  constructor(props) {\n    super(props);\n    this.onBtnClick = this.onBtnClick.bind(this);\n    this.onRequest = this.onRequest.bind(this);\n    this.onSuccess = this.onSuccess.bind(this);\n    this.onFailure = this.onFailure.bind(this);\n  }\n\n  onBtnClick() {\n    const {\n      authorizationUrl,\n      clientId,\n      clientSecret,\n      scope,\n      redirectUri,\n    } = this.props;\n    const search = toQuery({\n      client_id: clientId,\n      scope,\n      redirect_uri: redirectUri,\n      response_type: \"code\",\n    });\n\n    const popup = PopupWindow.open(`${authorizationUrl}?${search}`);\n    this.popup = popup;\n\n    this.onRequest();\n    popup.then(\n      (data) => this.onSuccess(data),\n      (error) => this.onFailure(error)\n    );\n  }\n\n  onRequest() {\n    const { onRequest } = this.props;\n\n    onRequest();\n  }\n\n  async onSuccess(data) {\n    if (!data.code) {\n      return this.onFailure(new Error(\"'code' not found\"));\n    }\n\n    const AuthorizeUrl =\n      `https://cors.snek.at/` +\n      `https://github.com/login/oauth/access_token?code=${data.code}` +\n      `&client_id=${this.props.clientId}` +\n      `&client_secret=${this.props.clientSecret}` +\n      `&redirect_uri=${this.props.redirectUri}` +\n      `&state=${await GuidGenerator()}`;\n\n    /* POST request to get the access token from GitHub */\n    await fetch(AuthorizeUrl, {\n      // prettier-ignore\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Access-Allow-Credentials\": \"True\",\n        \"Access-Control-Allow-Methods\": \"POST\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-Type\": \"application/json\",\n        \"Vary\": \"Origin\",\n      },\n      method: \"POST\",\n    })\n      .then(async (res) => await res.json())\n      .then(async (res) => {\n        const accessToken = res.access_token;\n\n        /* GET request to get the user used for OAuth */\n        await fetch(`https://api.github.com/user`, {\n          // prettier-ignore\n          headers: {\n            \"authorization\": \"Token \" + accessToken,\n          }\n        })\n          .then(async (res) => await res.json())\n          .then((res) => {\n            data = { username: res.login, accessToken };\n\n            const { onSuccess } = this.props;\n\n            return onSuccess(data);\n          });\n      });\n  }\n\n  onFailure(error) {\n    const { onRequest } = this.props;\n    console.log(error);\n    onRequest(error);\n  }\n\n  render() {\n    const { className } = this.props;\n    const attrs = { onClick: this.onBtnClick };\n\n    if (className) {\n      attrs.className = className;\n    }\n\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    return (\n      <MDBBtn color=\"elegant\" {...attrs}>\n        <MDBIcon fab icon=\"github\" size=\"lg\" />\n      </MDBBtn>\n    );\n  }\n}\n//#endregion\n\n//#region > Properties\nOAuth2Login.defaultProps = {\n  scope: \"\",\n  onRequest: () => {},\n};\n\nOAuth2Login.propTypes = {\n  authorizationUrl: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  clientId: PropTypes.string.isRequired,\n  clientSecret: PropTypes.string.isRequired,\n  onRequest: PropTypes.func,\n  onSuccess: PropTypes.func.isRequired,\n  onFailure: PropTypes.func.isRequired,\n  redirectUri: PropTypes.string.isRequired,\n  scope: PropTypes.string,\n};\n//#endregion\n\n//#region > Exports\n//> Default Class\nexport default OAuth2Login;\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// DOM bindings for React Router\nimport { Route, Switch } from \"react-router-dom\";\n\n//> Components\n// import {\n//   HomePage,\n//   ProfilePage,\n//   MessagePage,\n//   RedirectPage,\n//   SearchPage,\n//   CompanyPage,\n//   TalkPage,\n// } from \"./components/pages\";\n\nclass Routes extends React.Component {\n  // saveSettings = (state) => {\n  //   this.props.saveSettings(state);\n  // };\n\n  render() {\n    return (\n      <Switch>\n        {/* <Route\n          exact\n          path=\"/\"\n          component={(props) => (\n            <HomePage\n              login={this.props.login}\n              globalState={this.props.globalState}\n              globalFunctions={this.props.globalFunctions}\n              registerUser={this.props.registerUser}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/redirect\"\n          component={(props) => <RedirectPage {...props} />}\n        />\n        <Route\n          exact\n          path=\"/u/:username\"\n          component={(props) => (\n            <ProfilePage\n              globalState={this.props.globalState}\n              fetchCacheData={this.props.fetchCacheData}\n              saveSettings={this.saveSettings}\n              uploadTalk={this.props.uploadTalk}\n              deleteTalk={this.props.deleteTalk}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/c/:company\"\n          component={(props) => (\n            <CompanyPage globalState={this.props.globalState} {...props} />\n          )}\n        />\n        <Route\n          exact\n          path=\"/t/:username/:talk\"\n          component={(props) => (\n            <TalkPage\n              globalState={this.props.globalState}\n              getTalk={this.props.getTalk}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/donate/cancel\"\n          component={(props) => <MessagePage {...props} />}\n        />\n        <Route\n          exact\n          path=\"/donate/thankyou\"\n          component={(props) => <MessagePage {...props} />}\n        />\n        <Route\n          exact\n          path=\"/search\"\n          component={(props) => (\n            <SearchPage globalState={this.props.globalState} {...props} />\n          )}\n        /> */}\n        <Route\n          exact\n          path=\"/\"\n          render={function () {\n            return <h1>Root Layer 21:12</h1>;\n          }}\n        />\n        <Route\n          exact\n          path=\"/first\"\n          render={function () {\n            return <h1>First Layer</h1>;\n          }}\n        />\n        <Route\n          exact\n          path=\"/first/second\"\n          render={function () {\n            return <h1>Second Layer</h1>;\n          }}\n        />\n        <Route\n          path=\"/first/second/third\"\n          render={function () {\n            return <h1>Third Layer</h1>;\n          }}\n        />\n        <Route\n          render={function () {\n            return <h1>Not Found</h1>;\n          }}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© Simon Prast\n */\n","//#region > Imports\n//> Intel\nimport { Intel } from \"snek-intel\";\n//#endregion\n\n//#region > Constant Variables\nconst INTEL = new Intel();\n//#endregion\n\n//#region > Core\n/**\n * The intel ferry.\n *\n * @param actionFn The action to use\n * @param args Arguments to use for the action\n * @description The intel ferry is used to deliver calls to the SNEK-Intel\n */\nconst ferry = async (actionFn, args) => {\n  return actionFn(INTEL, args).then((res) => {\n    console.log(res);\n    switch (res.errorCode) {\n      case undefined:\n        console.log(\"SUCCESS\", res);\n        return res;\n      default:\n        console.log(\"ERROR\");\n        console.error(res.message);\n        return null;\n    }\n  });\n};\n//#endregion\n\n//#region > Exports\nexport { ferry };\n//#endregion\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// DOM bindings for React Router\nimport { BrowserRouter as Router } from \"react-router-dom\";\n// DOM bindings for React Router\nimport { withRouter } from \"react-router-dom\";\n//> Additional\n// SHA Hashing algorithm\nimport sha256 from \"js-sha256\";\n//> MDB\n// \"Material Design for Bootstrap\" is a great UI design framework\nimport { MDBProgress } from \"mdbreact\";\n\n//> Components\n/**\n * Footer: Global Footer\n * Navbar: Global navigation bar\n */\n// import { Footer, Navbar } from \"./components/molecules\";\n// Starts the page on top when reloaded or redirected\nimport { ScrollToTop } from \"./components/atoms\";\n//> Routes\nimport Routes from \"./Routes\";\n//> Core\nimport { ferry } from \"./actions\";\n//> Actions\n// import {\n//   login,\n//   logout,\n//   fetchGitLabServers,\n//   appendSourceObjects,\n//   getAllPageUrls,\n//   getData,\n//   saveSettings,\n//   register,\n//   readCache,\n//   updateCache,\n//   writeCache,\n//   getAllTalks,\n//   getTalk,\n//   uploadTalk,\n//   deleteTalk,\n// } from \"./actions/intel\";\n//#endregion\n\nclass App extends React.Component {\n  render() {\n    console.log(\"STATE MAP: Render - LOC App.js\");\n\n    return (\n      <ScrollToTop>\n        <div className=\"flyout\">\n          {/* <Navbar\n              username={this.state.user}\n              logmeout={this.logout}\n              users={this.getAllPageUrls}\n              globalState={this.state}\n            />\n            <ToastContainer\n              hideProgressBar={false}\n              newestOnTop={true}\n              autoClose={3000}\n            /> */}\n          <main\n          // className={\n          //   this.state.fetchedUser &&\n          //   this.state.fetchedUser.platformData.user &&\n          //   this.state.fetchedUser.platformData.user.settings &&\n          //   this.state.fetchedUser.platformData.user.settings.activeTheme\n          //     ? \"theme-\" +\n          //       this.state.fetchedUser.platformData.user.settings\n          //         .activeTheme\n          //     : undefined\n          // }\n          >\n            <Routes\n            // login={this.login}\n            // fetchCacheData={this.fetchCacheData}\n            // globalState={this.state}\n            // globalFunctions={{\n            //   handleLogin: this.handleLogin,\n            // }}\n            // registerUser={{\n            //   register: this.registerUser,\n            //   getGitLabServers: this.fetchGitLabServers,\n            // }}\n            // saveSettings={this.saveSettings}\n            // uploadTalk={this.uploadTalk}\n            // getTalk={this.getTalk}\n            // deleteTalk={this.deleteTalk}\n            />\n          </main>\n          {/* <Footer /> */}\n        </div>\n      </ScrollToTop>\n    );\n  }\n}\n\nexport default withRouter(App);\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© Simon Prast\n */\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              //console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              //console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      //console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      //console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n","//#region > Imports\n//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// DOM bindings for React Router\nimport { BrowserRouter as Router } from \"react-router-dom\";\n// This serves as an entry point to the DOM and server renderers for React\nimport ReactDOM from \"react-dom\";\n//> Font Awesome\n// Font Awesome is an awesome icon library\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n//> Bootstrap\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\n//> MDB\n// \"Material Design for Bootstrap\" is a great UI design framework\nimport \"mdbreact/dist/css/mdb.css\";\n\n//> CSS\n// Root SCSS file\nimport \"./index.scss\";\n//> Components\n// Root component\nimport App from \"./App\";\n//> Service Worker\nimport registerServiceWorker from \"./registerServiceWorker\";\n//#endregion\n\n// Render the root component to <div id=\"root\"></div>\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright Â© 2019-2020 Simon Prast\n */\n"],"sourceRoot":""}